SMTP stands for "Simple Mail Transfer Protocol". 
It is utilised to handle the sending of emails. In order to support email services, a protocol pair is required, comprising of SMTP and POP/IMAP. 
Together they allow the user to send outgoing mail and retrieve incoming mail, respectively.

The SMTP server performs three basic functions:
 It verifies who is sending emails through the SMTP server,
 It sends the outgoing mail,
 If the outgoing mail can't be delivered it sends the message back to the sender.

Most people will have encountered SMTP when configuring a new email address on some third-party email clients, 
such as Thunderbird; as when you configure a new email client, you will need to configure the SMTP server configuration in order to send outgoing emails.

POP, or "Post Office Protocol" and IMAP, "Internet Message Access Protocol" are both email protocols who are responsible for the transfer of email between a client and a mail server. 
The main differences is in POP's more simplistic approach of downloading the inbox from the mail server, to the client. 
Where IMAP will synchronise the current inbox, with new mail on the server, downloading anything new. This means that changes to the inbox made on one computer, 
over IMAP, will persist if you then synchronise the inbox from another computer. The POP/IMAP server is responsible for fulfiling this process.

How does SMTP work?
Email delivery functions much the same as the physical mail delivery system. The user will supply the email (a letter) and a service (the postal delivery service), 
and through a series of steps- will deliver it to the recipients inbox (postbox). The role of the SMTP server in this service, is to act as the sorting office, 
the email (letter) is picked up and sent to this server, which then directs it to the recipient.

Basicly how it works:

  1. The mail user agent, which is either your email client or an external program. connects to the SMTP server of your domain, e.g. smtp.google.com. 
  This initiates the SMTP handshake. This connection works over the SMTP port- which is usually 25. Once these connections have been made and validated, the SMTP session starts.
  2. The process of sending mail can now begin. The client first submits the sender, and recipient's email address- the body of the email and any attachments, to the server.
  3. The SMTP server then checks whether the domain name of the recipient and the sender is the same.
  4. The SMTP server of the sender will make a connection to the recipient's SMTP server before relaying the email. 
  If the recipient's server can't be accessed, or is not available- the Email gets put into an SMTP queue.
  5. Then, the recipient's SMTP server will verify the incoming email. It does this by checking if the domain and user name have been recognised. 
  The server will then forward the email to the POP or IMAP server, as shown in the diagram above.
  6. The E-Mail will then show up in the recipient's inbox.

This is a very simplified version of the process, and there are a lot of sub-protocols, communications and details that haven't been included.

Poorly configured or vulnerable mail servers can often provide an initial foothold into a network, but prior to launching an attack, we want to fingerprint the server to make our targeting as precise as possible. 
We're going to use the "smtp_version" module in MetaSploit to do this. As its name implies, it will scan a range of IP addresses and determine the version of any mail servers it encounters.

Enumerating Users from SMTP
The SMTP service has two internal commands that allow the enumeration of users: VRFY (confirming the names of valid users) and EXPN (which reveals the actual address of userâ€™s 
aliases and lists of e-mail (mailing lists). Using these SMTP commands, we can reveal a list of valid users.

We can do this manually, over a telnet connection- however Metasploit comes to the rescue again, providing a handy module appropriately called "smtp_enum" that will do the legwork for us! 
Using the module is a simple matter of feeding it a host or range of hosts to scan and a wordlist containing usernames to enumerate.

Requirements
As we're going to be using Metasploit for this, it's important that you have Metasploit installed. It is by default on both Kali Linux and Parrot OS; however, 
it's always worth doing a quick update to make sure that you're on the latest version before launching any attacks. You can do this with a simple "sudo apt update", and accompanying upgrade- if any are required.

Alternatives
It's worth noting that this enumeration technique will work for the majority of SMTP configurations; however there are other, non-metasploit tools such as 
smtp-user-enum that work even better for enumerating OS-level user accounts on Solaris via the SMTP service. Enumeration is performed by inspecting the responses to VRFY, EXPN, and RCPT TO commands.

Example:
  When we found a open port then with Metasploit must search wich modul we must use, for our example it must be 'smtp_version', like this:
  -msfconsole -q 
  -search smtp_version
  -it will open: auxiliary/scanner/smtp/smtp_version
  -use auxiliary/scanner/smtp/smtp_version
  -options
  -then we must set up configuration in this case we only config RHOSTS and put target IP
  -exploit
Then we must search module smtp_enum:
  -search smtp_enum
  -it will open: auxiliary/scanner/smtp/smtp_enum
  -use auxiliary/scanner/smtp/smtp_enum
We're going to be using the "top-usernames-shortlist.txt" wordlist from the Usernames subsection of seclists (/usr/share/wordlists/SecLists/Usernames if you have it installed).
Seclists is an amazing collection of wordlists. If you're running Kali or Parrot you can install seclists with: "sudo apt install seclists" Alternatively, you can download the repository.
  -options
  -then we must configure what we need to (we want to find usernames then we must config a filepath of file "top-usernames-shortlist.txt")
  -run

Okay, at the end of our Enumeration section we have a few vital pieces of information:
  1. A user account name
  2. The type of SMTP server and Operating System running.

We know from our port scan, that the only other open port on this machine is an SSH login. We're going to use this information to try and bruteforce the password of the SSH login for our user using Hydra.

Preparation
It's advisable that you exit Metasploit to continue the exploitation of this section of the room. Secondly, it's useful to keep 
a note of the information you gathered during the enumeration stage, to aid in the exploitation.

Hydra

There is a wide array of customisability when it comes to using Hydra, and it allows for adaptive password attacks against of many different services, including SSH. 
Hydra comes by default on both Parrot and Kali.

Hydra uses dictionary attacks primarily, both Kali Linux and Parrot OS have many different wordlists in the "/usr/share/wordlists" directory- if you'd like to browse and find a different wordlists 
to the widely used "rockyou.txt". Likewise I recommend checking out SecLists for a wider array of other wordlists that are extremely useful for all sorts of purposes, 
other than just password cracking. E.g. subdomain enumeration

The syntax for the command we're going to use to find the passwords is this:
"hydra -t 16 -l USERNAME -P /usr/share/wordlists/rockyou.txt -vV MACHINE_IP ssh"

hydra	-> Runs the hydra tool
-t 16 -> Number of parallel connections per target
-l [user]	-> Points to the user who's account you're trying to compromise
-P [path to dictionary]	-> Points to the file containing the list of possible passwords
-vV -> Sets verbose mode to very verbose, shows the login+pass combination for each attempt
[machine IP] -> The IP address of the target machine
ssh / protocol	-> Sets the protocol

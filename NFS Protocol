NFS stands for "Network File System" and allows a system to share directories and files with others over a network. By using NFS, users and programs can access 
files on remote systems almost as if they were local files. It does this by mounting all, or a portion of a file system on a server. 
The portion of the file system that is mounted can be accessed by clients with whatever privileges are assigned to each file.

First, the client will request to mount a directory from a remote host on a local directory just the same way it can mount a physical device. 
The mount service will then act to connect to the relevant mount daemon using RPC.

The server checks if the user has permission to mount whatever directory has been requested. It will then return a file handle which uniquely identifies each file and directory that is on the server.
If someone wants to access a file using NFS, an RPC call is placed to NFSD (the NFS daemon) on the server. This call takes parameters such as:
   The file handle
   The name of the file to be accessed
   The user's, user ID
   The user's group ID
These are used in determining access rights to the specified file. This is what controls user permissions, I.E read and write of files.

What runs NFS?
Using the NFS protocol, you can transfer files between computers running Windows and other non-Windows operating systems, such as Linux, MacOS or UNIX.
A computer running Windows Server can act as an NFS file server for other non-Windows client computers. Likewise, NFS allows a Windows-based computer running 
Windows Server to access files stored on a non-Windows NFS server.

The first of which is key to interacting with any NFS share from your local machine: nfs-common. It is important to have this package installed on any machine that uses NFS, either as client or server. 
It includes programs such as: lockd, statd, showmount, nfsstat, gssd, idmapd and mount.nfs. Primarily, 
we are concerned with "showmount" and "mount.nfs" as these are going to be most useful to us when it comes to extracting information from the NFS share.
With showmount -e [IP] we see the list of NFS shares ! And we can download it on  our system. 

Mounting NFS shares

Your client’s system needs a directory where all the content shared by the host server in the export folder can be accessed. You can create
this folder anywhere on your system. Once you've created this mount point, you can use the "mount" command to connect the NFS share to the mount point on your machine like so:
  sudo mount -t nfs IP:share /tmp/mount/ -nolock
sudo ->	Run as root
mount ->	Execute the mount command
-t nfs -> Type of device to mount, then specifying that it's NFS
IP:share -> The IP Address of the NFS server, and the name of the share we wish to mount
-nolock	-> Specifies not to use NLM locking

If you have a low privilege shell on any machine and you found that a machine has an NFS share you might be able to use that to escalate privileges, depending on how it is configured.

What is root_squash?
By default, on NFS shares- Root Squashing is enabled, and prevents anyone connecting to the NFS share from having root access to the NFS volume. Remote root users are assigned a 
user “nfsnobody” when connected, which has the least local privileges. Not what we want. However, if this is turned off, it can allow the creation of SUID bit files, allowing 
a remote user root access to the connected system.

SUID
So, what are files with the SUID bit set? Essentially, this means that the file or files can be run with the permissions of the file(s) owner/group. In this case, as the super-user. 
We can leverage this to get a shell with these privileges!

Method
This sounds complicated, but really- provided you're familiar with how SUID files work, it's fairly easy to understand. We're able to upload files to the NFS share, 
and control the permissions of these files. We can set the permissions of whatever we upload, in this case a bash shell executable. We can then log in through SSH, 
and execute this executable to gain a root shell!

The Executable
Due to compatibility reasons,  we will obtain the bash executable directly from the target machine.
With the key obtained , we can use SCP with the command scp -i key_name username@MACHINE_IP:/bin/bash ~/Downloads/bash to download it onto our attacking machine.
Another method to overcome compatibility issues is to obtain a standard Ubuntu Server 18.04 bash executable, the same as the server's- as we know from our nmap scan. 
If you want to download it via the command line, be careful not to download the github page instead of the raw script. You can use: 
wget https://github.com/polo-sec/writing/raw/master/Security%20Challenge%20Walkthroughs/Networks%202/bash.

Mapped Out Pathway:
If this is still hard to follow, here's a step by step of the actions we're taking, and how they all tie together to allow us to gain a root shell:
  NFS Access ->
  Gain Low Privilege Shell ->
  Upload Bash Executable to the NFS share ->
  Set SUID Permissions Through NFS Due To Misconfigured Root Squash ->
  Login through SSH ->
  Execute SUID Bit Bash Executable ->
  ROOT ACCESS
Run it with "./bash -p". The -p persists the permissions, so that it can run as root with SUID- as otherwise bash will sometimes drop the permissions

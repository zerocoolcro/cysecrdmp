These are just some of the basic Linux commands:

We need to be able to do basic functions like navigate to files, output their contents and make files! The commands to do so are self-explanatory.

Command	     Description
echo --> Output any text that we provide
whoami --> Find out what user we're currently logged in as.

If we want to "echo" a single word, we don't need to use double quotes, for example: echo Hello. 
However, the string should be enclosed within double quotes if one or more spaces are present, for example: echo "Hello Friend!".

Interacting With the Filesystem:
As I previously stated, being able to navigate the machine that you are logged 
into without relying on a desktop environment is pretty important. 
After all, what's the point of logging in if we can't go anywhere?

Command	Full Name
ls -->  listing
cd -->  change directory
cat --> concatenate
pwd --> print working directory

Before we can do anything such as finding out the contents of any files or folders,
we need to know what exists in the first place. This can be done using the "ls" command (short for listing).
Pro tip: You can list the contents of a directory without having to navigate to it by using ls and the name of the directory: ls Pictures

Say if I wanted to open the "Pictures" directory - I'd do "cd Pictures". 
Where again, we want to find out the contents of this "Pictures" directory and to do so, we'd use "ls" again

Using the "cat" command we can see what is in the file.
For example the file is called myfile.txt and when we type cat myfile.txt it gives us the output of that file,
and if we want to get to the file even faster, we type: cat /home/ubuntu/Documents/myfile.txt

Let's say, we already know we're in "Documents" thanks to our terminal, but at this point in time, 
we have no idea where "Documents" is stored so that we can get back to it easily in the future.
Than we use the "pwd" (print working directory) command to find the full file path of this "Documents" folder.
We're helpfully told by Linux that this "Documents" directory is stored at "/home/ubuntu/Documents" on the machine.
Now in the future, if we find ourselves in a different location, we can just use "cd /home/ubuntu/Documents".


No need to consistently use "cd" and "ls" to find out what is where. Instead, we can use commands such as "find" to automate things like this for us!
In this case, we're looking for "myfile.txt"
If we remember the filename, we can simply use "find -name myfile.txt" where the command will look through every folder in our current directory.
Let's say that we don't know the name of the file, or want to search for every file that has an extension such as ".txt".
We will construct a command such as "find -name *.txt". Where "Find" has been able to find every .txt file and has then given us the location of each one.

The "grep" command allows us to search the contents of files for specific values that we are looking for.
Let's say for example if we wanted to search this log file to see the things that a certain user/IP address visited?
We can use "grep" to search the entire contents of this file for any entries of the value that we are searching for.
Going with the example of a web server's access log, we want to see everything that the IP address "81.143.211.90" has visited: "grep "81.143.211.90" access.log".

Introduction with Shell Operators
Symbol / Operator	Description
&	       This operator allows you to run commands in the background of your terminal.
Example: "cp large_file /destination_directory &"
To check which background processes are currently running, you can use: "jobs"
And if you want to bring a background process to the foreground, use: "fg"

&&	     This operator allows you to combine multiple commands together in one line of your terminal.
Example: "mkdir new_folder && cd new_folder" (This command first creates a directory called new_folder, and if that is successful, it then changes into that directory.)
Another one: "cp large_file /destination_directory && echo "Copy successful!"" (large_file is copied to destination_directory, and if the copy process completes without errors, it will print "Copy successful!" to the terminal.)
>	       This operator is a redirector - meaning that we can take the output from a command (such as using cat to output a file) and direct it elsewhere.
This operator is what's known as an output redirector. Let's say we wanted to create a file named "welcome" with the message "hey".
We can run "echo hey > welcome" and then we can see in welcome file: "cat welcome"
>>	     This operator does the same function of the > operator but appends the output rather than replacing (meaning nothing is overwritten).
This operator does not overwrite already written words, but only appends them: "echo hello >> welcome", "cat welcome"(to see what is written).


